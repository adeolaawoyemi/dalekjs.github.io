{
    "project": {
        "name": "dalek-reporter-junit",
        "description": "jUnit reporter for the Dalekjs testing framework",
        "version": "0.0.1",
        "url": "http://dalekjs.com"
    },
    "files": {
        "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js": {
            "name": "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {
                "Reporter": 1
            },
            "classes": {
                "Reporter": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Reporter": {
            "name": "Reporter",
            "submodules": {},
            "classes": {
                "Reporter": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "index.js",
            "line": 35
        }
    },
    "classes": {
        "Reporter": {
            "name": "Reporter",
            "shortname": "Reporter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Reporter",
            "file": "index.js",
            "line": 35,
            "description": "The jUnit reporter can produce a jUnit compatible file with the results of your testrun,\nthis reporter enables you to use daleks testresults within a CI environment like Jenkins.\n\nThe reporter can be installed with the following command:\n```\n$ npm install dalek-reporter-junit --save-dev\n```\n\nThe file will follow the jUnit XML format:\n\n```html\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resource name=\"DalekJSTest\">\n    <testsuite start=\"1375125067\" name=\"Click - DalekJS guinea pig [Phantomjs]\" end=\"1375125067\" totalTests=\"0\">\n        <testcase start=\"1375125067\" name=\"Can click a select option (OK, jQuery style, no message)\" end=\"null\" result=\"null\">\n            <variation start=\"1375125067\" name=\"val\" end=\"1375125067\">\n                <severity>pass</severity>\n                <description>&lt;![CDATA[David is the favourite]]&gt;</description>\n                <resource>DalekJSTest</resource>\n            </variation>\n            <variation start=\"1375125067\" name=\"val\" end=\"null\">\n                <severity>pass</severity>\n                <description>&lt;![CDATA[Matt is now my favourite, bow ties are cool]]&gt;</description>\n                <resource>DalekJSTest</resource>\n            </variation>\n        </testcase>\n    </testsuite>\n </resource>\n```\n\nBy default the file will be written to `report/dalek.xml`,\nyou can change this by adding a config option to the your Dalekfile\n\n```javascript\n\"junit-reporter\": {\n  \"dest\": \"your/folder/your_file.xml\"\n}\n```",
            "is_constructor": 1,
            "part": "JUnit",
            "api": ""
        }
    },
    "classitems": [
        {
            "file": "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js",
            "line": 1,
            "description": "Tag-closer extension for CodeMirror.\n\nThis extension adds an \"autoCloseTags\" option that can be set to\neither true to get the default behavior, or an object to further\nconfigure its behavior.\n\nThese are supported options:\n\n`whenClosing` (default true)\n  Whether to autoclose when the '/' of a closing tag is typed.\n`whenOpening` (default true)\n  Whether to autoclose the tag when the final '>' of an opening\n  tag is typed.\n`dontCloseTags` (default is empty tags for HTML, none for XML)\n  An array of tag names that should not be autoclosed.\n`indentTags` (default is block tags for HTML, none for XML)\n  An array of tag names that should, when opened, cause a\n  blank line to be added inside the tag, and the blank line and\n  closing line to be indented.\n\nSee demos/closetag.html for a usage example.",
            "class": "Reporter"
        },
        {
            "file": "index.js",
            "line": 122,
            "description": "Connects to all the event listeners",
            "itemtype": "method",
            "name": "startListening",
            "chainable": 1,
            "class": "Reporter",
            "module": "Reporter"
        },
        {
            "file": "index.js",
            "line": 140,
            "description": "Stores the current browser name",
            "itemtype": "method",
            "name": "runBrowser",
            "params": [
                {
                    "name": "browser",
                    "description": "Browser name",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Reporter",
            "module": "Reporter"
        },
        {
            "file": "index.js",
            "line": 153,
            "description": "Generates XML skeleton for testsuites",
            "itemtype": "method",
            "name": "testsuiteStarted",
            "params": [
                {
                    "name": "name",
                    "description": "Testsuite name",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Reporter",
            "module": "Reporter"
        },
        {
            "file": "index.js",
            "line": 177,
            "description": "Finishes XML skeleton for testsuites",
            "itemtype": "method",
            "name": "testsuiteFinished",
            "chainable": 1,
            "class": "Reporter",
            "module": "Reporter"
        },
        {
            "file": "index.js",
            "line": 189,
            "description": "Generates XML skeleton for an assertion",
            "itemtype": "method",
            "name": "assertion",
            "params": [
                {
                    "name": "data",
                    "description": "Event data",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Reporter",
            "module": "Reporter"
        },
        {
            "file": "index.js",
            "line": 221,
            "description": "Generates XML skeleton for a testcase",
            "itemtype": "method",
            "name": "testStarted",
            "params": [
                {
                    "name": "data",
                    "description": "Event data",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Reporter",
            "module": "Reporter"
        },
        {
            "file": "index.js",
            "line": 245,
            "description": "Finishes XML skeleton for a testcase",
            "itemtype": "method",
            "name": "testFinished",
            "params": [
                {
                    "name": "data",
                    "description": "Event data",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Reporter",
            "module": "Reporter"
        },
        {
            "file": "index.js",
            "line": 268,
            "description": "Finishes XML and writes file to the file system",
            "itemtype": "method",
            "name": "runnerFinished",
            "params": [
                {
                    "name": "data",
                    "description": "Event data",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Reporter",
            "module": "Reporter"
        },
        {
            "file": "index.js",
            "line": 294,
            "description": "Helper method to generate deeper nested directory structures",
            "itemtype": "method",
            "name": "_recursiveMakeDirSync",
            "params": [
                {
                    "name": "path",
                    "description": "PAth to create",
                    "type": "String"
                }
            ],
            "class": "Reporter",
            "module": "Reporter"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: part",
            "line": " index.js:35"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:35"
        },
        {
            "message": "Missing item type\nTag-closer extension for CodeMirror.\n\nThis extension adds an \"autoCloseTags\" option that can be set to\neither true to get the default behavior, or an object to further\nconfigure its behavior.\n\nThese are supported options:\n\n`whenClosing` (default true)\n  Whether to autoclose when the '/' of a closing tag is typed.\n`whenOpening` (default true)\n  Whether to autoclose the tag when the final '>' of an opening\n  tag is typed.\n`dontCloseTags` (default is empty tags for HTML, none for XML)\n  An array of tag names that should not be autoclosed.\n`indentTags` (default is block tags for HTML, none for XML)\n  An array of tag names that should, when opened, cause a\n  blank line to be added inside the tag, and the blank line and\n  closing line to be indented.\n\nSee demos/closetag.html for a usage example.",
            "line": " report/complexity/assets/scripts/vendor/codemirror/util/closetag.js:1"
        }
    ]
}