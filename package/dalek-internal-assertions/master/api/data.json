{
    "project": {
        "name": "dalek-internal-assertions",
        "description": "DalekJS internal assertion library",
        "version": "0.0.1",
        "url": "http://dalekjs.com"
    },
    "files": {
        "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js": {
            "name": "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {
                "Assertions": 1
            },
            "classes": {
                "Dalek.Internal.Assertions": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek.Internal": 1
            }
        }
    },
    "modules": {
        "Assertions": {
            "name": "Assertions",
            "submodules": {},
            "classes": {
                "Dalek.Internal.Assertions": 1
            },
            "fors": {},
            "namespaces": {
                "Dalek.Internal": 1
            },
            "tag": "module",
            "file": "index.js",
            "line": 34
        }
    },
    "classes": {
        "Dalek.Internal.Assertions": {
            "name": "Dalek.Internal.Assertions",
            "shortname": "Dalek.Internal.Assertions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Assertions",
            "namespace": "Dalek.Internal",
            "file": "index.js",
            "line": 34
        }
    },
    "classitems": [
        {
            "file": "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js",
            "line": 1,
            "description": "Tag-closer extension for CodeMirror.\n\nThis extension adds an \"autoCloseTags\" option that can be set to\neither true to get the default behavior, or an object to further\nconfigure its behavior.\n\nThese are supported options:\n\n`whenClosing` (default true)\n  Whether to autoclose when the '/' of a closing tag is typed.\n`whenOpening` (default true)\n  Whether to autoclose the tag when the final '>' of an opening\n  tag is typed.\n`dontCloseTags` (default is empty tags for HTML, none for XML)\n  An array of tag names that should not be autoclosed.\n`indentTags` (default is block tags for HTML, none for XML)\n  An array of tag names that should, when opened, cause a\n  blank line to be added inside the tag, and the blank line and\n  closing line to be indented.\n\nSee demos/closetag.html for a usage example.",
            "class": "Dalek.Internal.Assertions"
        },
        {
            "file": "index.js",
            "line": 44,
            "is_constructor": 1,
            "part": "Assertions",
            "api": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 56,
            "description": "Starts assertion chaining",
            "itemtype": "method",
            "name": "chain",
            "api": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 69,
            "description": "Ends an assertion chain",
            "itemtype": "method",
            "name": "end",
            "api": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 88,
            "description": "Asserts that a given ressource does exist in the environment.",
            "itemtype": "method",
            "name": "resourceExists",
            "api": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 102,
            "description": "Asserts that a given element appears n times on the page.\n\n\nGiven this portion of html, you would like to assure that all of these elements\nare ending up in your rendered markup on your page.\n\n```html\n<section id=\"blog-overview\">\n  <article class=\"teaser\"></article>\n  <article class=\"teaser\"></article>\n  <article class=\"teaser\"></article>\n  <article class=\"teaser\"></article>\n</section>\n```\n\nThe simple solution is to check if all these elements are present\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser', 4, '4 blog teasers are present')\n```\nThe alternate syntax for this is:\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .is(4, '4 blog teasers are present')\n```\n\nIf you are not sure how many elements will exactly end up in your markup,\nyou could use the between assertion handler\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .is.between(2, 6, 'Between 2 and 6 blog teasers are present')\n```\n\nIf you dealing with the situation that you have a minimum of elements,\nyou expect, you can use this helper...\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .is.gt(2, 'At least 3 blog teasers are present')\n```\n... if you want to know if its 'greater than equal', you can use this one...\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .is.gte(2, 'At least 2 blog teasers are present')\n```\n... as well as their 'lower than' and 'lower than equal' equivalents\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .is.lt(5, 'Less than 5 blog teasers are present')\n```\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .is.lte(5, 'Less than, or 5 blog teasers are present')\n```\nAnd if you just wan't to know, if a certain amount of teasers isn't present,\nyou can still use the ':not(): assertion helper\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .is.not(5, 'There are more or less than 5 teasers present')\n```\n\nIf you wan't to allow multiple correct values, you can use the ':are()' helper\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .are([1,3,6], 'Teaser count is an odd number between 1 and 6')\n```\n\nof couse you can test for the opoosite with ':are()'\n\n```javascript\ntest.numberOfElements('#blog-overview .teaser')\n    .are([0,2,4], 'Teaser count is not an even number between 1 and 6')\n```",
            "api": "",
            "itemtype": "method",
            "name": "numberOfElements",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 202,
            "description": "Asserts that a given element is visible n times in the current viewport.\n\nGiven this portion of html, you would like to assure that all of these elements\n are ending up in your rendered markup on your page.\n```html\n <section id=\"blog-overview\">\n   <article class=\"teaser\"></article>\n   <article class=\"teaser\"></article>\n   <article class=\"teaser\"></article>\n   <article class=\"teaser\"></article>\n </section>\n ```\nThe simple solution is to check if all these elements are visible\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser', 4, '4 blog teasers are visible')\n ```\n The alternate syntax for this is:\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .is(4, '4 blog teasers are visible')\n ```\nIf you are not sure how many elements will exactly be shown in the current viewport,\n you could use the between assertion handler\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .is.between(2, 6, 'Between 2 and 6 blog teasers are visible')\n ```\nIf you dealing with the situation that you have a minimum of elements,\n you expect, you can use this helper...\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .is.gt(2, 'At least 3 blog teasers are visible')\n ```\n ... if you want to know if its 'greater than equal', you can use this one...\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .is.gte(2, 'At least 2 blog teasers are visible')\n ```\n ... as well as their 'lower than' and 'lower than equal' equivalents\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .is.lt(5, 'Less than 5 blog teasers are visible')\n ```\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .is.lte(5, 'Less than, or 5 blog teasers are visible')\n ```\n And if you just wan't to know, if a certain amount of teasers isn't visible,\n you can still use the ':not(): assertion helper\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .is.not(5, 'There are more or less than 5 teasers visible')\n ```\nIf you wan't to allow multiple correct values, you can use the ':are()' helper\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .are([1,3,6], 'Teaser count is an odd number between 1 and 6')\n ```\nof couse you can test for the opoosite with ':are()' and ':not()'\n```javascript\n test.numberOfVisibleElements('#blog-overview .teaser')\n     .are.not([0,2,4], 'Teaser count is not an even number between 1 and 6')\n ```",
            "api": "",
            "itemtype": "method",
            "name": "numberOfVisibleElements",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 303,
            "description": "Asserts that a given form field has the provided value.\n\nGiven this portion of html, we would like to get the information which option element\nis currently selected.\n\n```html\n<form name=\"fav-doctor\" id=\"fav-doctor\">\n  <select id=\"the-doctors\">\n    <option value=\"9\">Eccleston</option>\n    <option selected value=\"10\">Tennant</option>\n    <option value=\"11\">Smith</option>\n  </select>\n</form>\n```\n\n```javascript\ntest\n  .val('#the-doctors', 10, 'David is the favourite')\n  // lets change the favourite by selection the last option\n .click('#the-doctors option:last')\n .val('#the-doctors', 11, 'Matt is now my favourite, bow ties are cool')\n```\n\nThis assertion is capable of getting the values from every form element\nthat holds a value attribute\n\nGetting texts out of normal input fields is pretty straight forward\n\n```html\n<label for=\"fav-enemy\">Tell my your favourity Who enemy:</label>\n<input id=\"fav-enemy\" name=\"fav-enemy\" type=\"text\" value=\"Daleks\" />\n```\n\n```javascript\ntest\n  .val('#fav-enemy', 'Daleks', 'Daleks are so cute')\n  // lets change the favourite by typing smth. new\n .type('#fav-enemy', 'Cyberman')\n .val('#fav-enemy', 'Cyberman', 'Cyberman are so cyber')\n```\n\nOf course, you can use a bunch of assertion helpers, to enable\nyourself to do more than just one assertion with the ':are()' helper.\n\n```javascript\ntest\n  .val('#fav-enemy')\n  .is('Daleks', 'Still cute, those daleks')\n  .is.not('Klingons', 'Different fandom bro')\n  // yep, multiple mentions are allowed\n  .are(['Daleks', 'Cyberman', 'The master'], 'All of them are cool');\n```",
            "itemtype": "method",
            "name": "val",
            "api": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 478,
            "description": "Asserts that current HTTP status code is the same as the one passed as argument.\nTODO: Needs some work",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 490,
            "description": "Asserts that an element matching the provided selector expression exists in remote DOM environment.\n\n```html\n<body>\n  <p id=\"so-lonely\">Last of the timelords</p>\n</body>\n```\n\n```javascript\ntest\n  .exists('#so-lonely', 'The loneliest element in the universe exists')\n```",
            "itemtype": "method",
            "name": "exists",
            "api": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 521,
            "description": "Asserts that an element matching the provided selector expression doesn't exists within the remote DOM environment.\n\n```html\n<body>\n  <p id=\"so-lonely\">Last of the timelords</p>\n</body>\n```\n\n```javascript\ntest\n  .doesntExist('#the-master', 'The master element has not been seen')\n```",
            "itemtype": "method",
            "name": "doesntExist",
            "api": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 552,
            "description": "Asserts that the element matching the provided selector expression is not visible.",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 569,
            "description": "Asserts that the element matching the provided selector expression is visible.",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 586,
            "description": "Asserts that given text does not exist in the provided selector.",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 603,
            "description": "Asserts that given text does not exist in the provided selector.",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 614,
            "description": "Asserts that given text does exist in the provided selector.",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 631,
            "description": "Asserts that given alertText does exist in the provided alert/confirm or prompt dialog.",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 642,
            "description": "Asserts that given text does exist in the provided selector.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 657,
            "description": "Asserts that given title does not mathc the given expactions",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 672,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 683,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 694,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 716,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 725,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 733,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 741,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 749,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 757,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 765,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 776,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 809,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 825,
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 874,
            "description": "Assert if a given value shallow equals a snd. given value",
            "itemtype": "method",
            "name": "_testShallowEquals",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "Value to test",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "false if values don't match, true if they match",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 894,
            "description": "Assert if a given value shallow does not equal a snd. given value",
            "itemtype": "method",
            "name": "_testShallowUnequals",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "Value to test",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "true if values don't match, false if they match",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 953,
            "description": "Assert if a given value is boolean 'true'",
            "itemtype": "method",
            "name": "_testTruthy",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "false if value is false, true if value is true",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        },
        {
            "file": "index.js",
            "line": 966,
            "description": "Assert if a given value is boolean 'false'",
            "itemtype": "method",
            "name": "_testFalsy",
            "params": [
                {
                    "name": "a",
                    "description": "Value to test",
                    "type": "Bool"
                }
            ],
            "return": {
                "description": "true if value is false, false if value is true",
                "type": "Bool"
            },
            "access": "private",
            "tagname": "",
            "class": "Dalek.Internal.Assertions",
            "module": "Assertions",
            "namespace": "Dalek.Internal"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: part",
            "line": " index.js:44"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:44"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:56"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:69"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:88"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:102"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:202"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:303"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:490"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:521"
        },
        {
            "message": "Missing item type\nTag-closer extension for CodeMirror.\n\nThis extension adds an \"autoCloseTags\" option that can be set to\neither true to get the default behavior, or an object to further\nconfigure its behavior.\n\nThese are supported options:\n\n`whenClosing` (default true)\n  Whether to autoclose when the '/' of a closing tag is typed.\n`whenOpening` (default true)\n  Whether to autoclose the tag when the final '>' of an opening\n  tag is typed.\n`dontCloseTags` (default is empty tags for HTML, none for XML)\n  An array of tag names that should not be autoclosed.\n`indentTags` (default is block tags for HTML, none for XML)\n  An array of tag names that should, when opened, cause a\n  blank line to be added inside the tag, and the blank line and\n  closing line to be indented.\n\nSee demos/closetag.html for a usage example.",
            "line": " report/complexity/assets/scripts/vendor/codemirror/util/closetag.js:1"
        },
        {
            "message": "Missing item type",
            "line": " index.js:44"
        },
        {
            "message": "Missing item type\nAsserts that current HTTP status code is the same as the one passed as argument.\nTODO: Needs some work",
            "line": " index.js:478"
        },
        {
            "message": "Missing item type\nAsserts that the element matching the provided selector expression is not visible.",
            "line": " index.js:552"
        },
        {
            "message": "Missing item type\nAsserts that the element matching the provided selector expression is visible.",
            "line": " index.js:569"
        },
        {
            "message": "Missing item type\nAsserts that given text does not exist in the provided selector.",
            "line": " index.js:586"
        },
        {
            "message": "Missing item type\nAsserts that given text does not exist in the provided selector.",
            "line": " index.js:603"
        },
        {
            "message": "Missing item type\nAsserts that given text does exist in the provided selector.",
            "line": " index.js:614"
        },
        {
            "message": "Missing item type\nAsserts that given alertText does exist in the provided alert/confirm or prompt dialog.",
            "line": " index.js:631"
        },
        {
            "message": "Missing item type\nAsserts that given text does exist in the provided selector.",
            "line": " index.js:642"
        },
        {
            "message": "Missing item type\nAsserts that given title does not mathc the given expactions",
            "line": " index.js:657"
        },
        {
            "message": "Missing item type",
            "line": " index.js:672"
        },
        {
            "message": "Missing item type",
            "line": " index.js:683"
        },
        {
            "message": "Missing item type",
            "line": " index.js:694"
        },
        {
            "message": "Missing item type",
            "line": " index.js:716"
        },
        {
            "message": "Missing item type",
            "line": " index.js:725"
        },
        {
            "message": "Missing item type",
            "line": " index.js:733"
        },
        {
            "message": "Missing item type",
            "line": " index.js:741"
        },
        {
            "message": "Missing item type",
            "line": " index.js:749"
        },
        {
            "message": "Missing item type",
            "line": " index.js:757"
        },
        {
            "message": "Missing item type",
            "line": " index.js:765"
        },
        {
            "message": "Missing item type",
            "line": " index.js:776"
        },
        {
            "message": "Missing item type",
            "line": " index.js:809"
        },
        {
            "message": "Missing item type",
            "line": " index.js:825"
        }
    ]
}