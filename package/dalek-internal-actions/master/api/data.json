{
    "project": {
        "name": "dalek-internal-actions",
        "description": "DalekJS inetrnal browser action library",
        "version": "0.0.1",
        "url": "http://dalekjs.com"
    },
    "files": {
        "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js": {
            "name": "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {
                "DalekJS": 1
            },
            "classes": {
                "Actions": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "DalekJS": {
            "name": "DalekJS",
            "submodules": {},
            "classes": {
                "Actions": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "index.js",
            "line": 33
        }
    },
    "classes": {
        "Actions": {
            "name": "Actions",
            "shortname": "Actions",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DalekJS",
            "file": "index.js",
            "line": 33,
            "description": "Actions are a way to control your browsers, e.g. simulate user interactions\nlike clicking elements, open urls, filling out input fields, etc.",
            "is_constructor": 1,
            "part": "Actions",
            "api": ""
        }
    },
    "classitems": [
        {
            "file": "report/complexity/assets/scripts/vendor/codemirror/util/closetag.js",
            "line": 1,
            "description": "Tag-closer extension for CodeMirror.\n\nThis extension adds an \"autoCloseTags\" option that can be set to\neither true to get the default behavior, or an object to further\nconfigure its behavior.\n\nThese are supported options:\n\n`whenClosing` (default true)\n  Whether to autoclose when the '/' of a closing tag is typed.\n`whenOpening` (default true)\n  Whether to autoclose the tag when the final '>' of an opening\n  tag is typed.\n`dontCloseTags` (default is empty tags for HTML, none for XML)\n  An array of tag names that should not be autoclosed.\n`indentTags` (default is block tags for HTML, none for XML)\n  An array of tag names that should, when opened, cause a\n  blank line to be added inside the tag, and the blank line and\n  closing line to be indented.\n\nSee demos/closetag.html for a usage example.",
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 47,
            "description": "It can be really cumbersome to repeat selectors all over when performing\nmultiple actions or assertions on the same element(s).\nWhen you use the query method (or its alias $), you're able to specify a\nselector once instead of repeating it all over the place.\n\nSo, instead of writing this:\n\n```javascript\ntest.open('http://doctorwhotv.co.uk/')\n    .assert.text('#nav').is('Navigation')\n    .assert.visible('#nav')\n    .assert.attr('#nav', 'data-nav', 'true')\n    .click('#nav')\n    .done();\n```\n\nyou can write this:\n\n```javascript\ntest.open('http://doctorwhotv.co.uk/')\n    .query('#nav')\n      .assert.text().is('Navigation')\n      .assert.visible()\n      .assert.attr('data-nav', 'true')\n      .click()\n    .end()\n    .done();\n```\n\nAlways make sure, you terminate it with the [assertions.html#meth-end](end) method!",
            "api": "",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element to query",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 93,
            "description": "Alias of query",
            "api": "",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element to query",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 104,
            "description": "Triggers a mouse event on the first element found matching the provided selector.\nSupported events are mouseup, mousedown, click, mousemove, mouseover and mouseout.\nTODO: IMPLEMENT",
            "itemtype": "method",
            "name": "mouseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 122,
            "description": "Sets HTTP_AUTH_USER and HTTP_AUTH_PW values for HTTP based authentication systems.\n\nIf your site is behind a HTTP basic auth, you're able to set the username and the password\n\n```javascript\ntest.setHttpAuth('OSWIN', 'rycbrar')\n    .open('http://admin.therift.com');\n```\n\nMost of the time, you`re not storing your passwords within files that will be checked\nin your vcs, for this scenario, you have two options:\n\nThe first option is, to use daleks cli capabilities to generate config variables\nfrom the command line, like this\n\n```batch\n$ dalek --vars USER=OSWIN,PASS=rycbrar\n```\n\n```javascript\ntest.setHttpAuth(test.config.get('USER'), test.config.get('PASS'))\n    .open('http://admin.therift.com');\n```\n\nThe second option is, to use env variables to generate config variables\nfrom the command line, like this\n\n```batch\n$ SET USER=OSWIN\n$ SET PASS=rycbrar\n$ dalek\n```\n\n```javascript\ntest.setHttpAuth(test.config.get('USER'), test.config.get('PASS'))\n    .open('http://admin.therift.com');\n```\n\nIf both, dalek variables & env variables are set, the dalek variables win.\nFor more information about this, I recommend to check out the [configuration docs](/docs/config.html)",
            "itemtype": "method",
            "name": "setHttpAuth",
            "params": [
                {
                    "name": "username",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Actions"
            },
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 177,
            "description": "Switches to an iFrame context\n\nSometimes you encounter situations, where you need to drive/access an iFrame sitting in your page.\nYou can access such frames with this mehtod, but be aware of the fact, that the complete test context\nthan switches to the iframe context, every action and assertion will be executed within the iFrame context.\nBtw.: The domain of the IFrame can be whatever you want, this method has no same origin policy restrictions.\n\nIf you wan't to get back to the parents context, you have to use the [toParent](#meth-toParent) method.\n\n```html\n<div>\n  <iframe id=\"login\" src=\"/login.html\"/>\n</div>\n```\n\n```javascript\n test.open('http://adomain.withiframe.com')\n   .assert.title().is('Title of a page that embeds an iframe')\n   .toIFrame('#login')\n     .assert.title().is('Title of a page that can be embedded as an iframe')\n   .toParent()\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "toFrame",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the frame to switch to",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 220,
            "description": "Switches back to the parent page context when the test context has been\nswitched to an iFrame context\n\n```html\n<div>\n  <iframe id=\"login\" src=\"/login.html\"/>\n</div>\n```\n\n```javascript\n test.open('http://adomain.withiframe.com')\n   .assert.title().is('Title of a page that embeds an iframe')\n   .toIFrame('#login')\n     .assert.title().is('Title of a page that can be embedded as an iframe')\n   .toParent()\n   .assert.title().is('Title of a page that embeds an iframe')\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "toParent",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 252,
            "description": "Switches to a different window context\n\nSometimes you encounter situations, where you need to access a .\nYou can access such frames with this mehtod, but be aware of the fact, that the complete test context\nthan switches to the window context, every action and assertion will be executed within the chosen window context.\nBtw.: The domain of the window can be whatever you want, this method has no same origin policy restrictions.\n\nIf you want to get back to the parents context, you have to use the [toParentWindow](#meth-toParentWindow) method.\n\n```html\n<div>\n  <a onclick=\"window.open('http://google.com','goog','width=480, height=300')\">Open Google</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n   .assert.title().is('Title of a page that can open a popup window')\n   .toWindow('goog')\n     .assert.title().is('Google')\n   .toParentWindow()\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "toWindow",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the window to switch to",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 290,
            "description": "Switches back to the parent windoe context when the test context has been\nswitched to a different windoe context\n\n```html\n<div>\n  <a onclick=\"window.open('http://google.com','goog','width=480, height=300')\">Open Google</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n   .assert.title().is('Title of a page that can open a popup window')\n   .toWindow('goog')\n     .assert.title().is('Google')\n   .toParentWindow()\n   .assert.title().is('Title of a page that can open a popup window')\n   .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "toParentWindow",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 322,
            "description": "Waits until a function returns true to process any next step.\n\nYou can also set a callback on timeout using the onTimeout argument,\nand set the timeout using the timeout one, in milliseconds. The default timeout is set to 5000ms.",
            "itemtype": "method",
            "name": "waitFor",
            "params": [
                {
                    "name": "fn",
                    "description": "Async function that resolves an promise when ready",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 341,
            "description": "Wait until a resource that matches the given testFx is loaded to process a next step.",
            "itemtype": "method",
            "name": "waitForResource",
            "params": [
                {
                    "name": "ressource",
                    "description": "URL of the ressource that should be waited for",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 357,
            "description": "Waits until the passed text is present in the page contents before processing the immediate next step.",
            "itemtype": "method",
            "name": "waitForText",
            "params": [
                {
                    "name": "text",
                    "description": "Text to be waited for",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 373,
            "description": "Waits until an element matching the provided selector expression is visible in the remote DOM to process a next step.",
            "itemtype": "method",
            "name": "waitUntilVisible",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element that should be waited to become invisible",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 395,
            "description": "Waits until an element matching the provided selector expression is no longer visible in remote DOM to process a next step.",
            "itemtype": "method",
            "name": "waitWhileVisible",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element that should be waited to become visible",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in miliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 417,
            "description": "Take a screenshot of the current page.\n\nThe pathname argument takes some placeholders that will be replaced\nPlaceholder:\n\n  - `:browser` - The browser name (e.g. ‘Chrome‘, ‘Safari‘, ‘Firefox‘, etc.)\n  - `:version` -  The browser version (e.g. ‘10_0‘, ‘23_11_5‘, etc.)\n  - `:os` - The operating system (e.g. `OSX`, `Windows`, `Linux`)\n  - `:osVersion` - The operating system version (e.g `XP`, `7`, `10_8`, etc.)\n  - `:viewport` - The current viewport in pixels (e.g. `w1024_h768`)\n  - `:timestamp` - UNIX like timestapm (e.g. `637657345`)\n  - `:date` - Current date in format MM_DD_YYYY (e.g. `12_24_2013`)\n  - `:datetime` - Current datetime in format MM_DD_YYYY_HH_mm_ss (e.g. `12_24_2013_14_55_23`)\n\n```javascript\n// creates 'my/folder/my_file.png'\ntest.screenshot('my/folder/my_file');\n// creates 'my/page/in/safari/homepage.png'\ntest.screenshot('my/page/in/:browser/homepage');\n// creates 'my/page/in/safari_6_0_1/homepage.png'\ntest.screenshot('my/page/in/:browser_:version/homepage');\n// creates 'my/page/in/safari_6_0_1/on/osx/homepage.png'\ntest.screenshot('my/page/in/:browser_:version/on/:os/homepage');\n// creates 'my/page/in/safari_6_0_1/on/osx_10_8/homepage.png'\ntest.screenshot('my/page/in/:browser_:version/on/:os_:osVersion/homepage');\n// creates 'my/page/at/w1024_h768/homepage.png'\ntest.screenshot('my/page/at/:viewport/homepage');\n// creates 'my/page/at/637657345/homepage.png'\ntest.screenshot('my/page/in_time/:timestamp/homepage');\n// creates 'my/page/at/12_24_2013/homepage.png'\ntest.screenshot('my/page/in_time/:date/homepage');\n// creates 'my/page/at/12_24_2013_14_55_23/homepage.png'\ntest.screenshot('my/page/in_time/:datetime/homepage');\n```",
            "api": "",
            "itemtype": "method",
            "name": "screenshot",
            "params": [
                {
                    "name": "pathname",
                    "description": "Name of the folder and file the screenshot should be saved to",
                    "type": "String"
                }
            ],
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 466,
            "description": "Pause steps suite execution for a given amount of time, and optionally execute a step on done.\n\nThis makes sense, if you have a ticker for example, tht scrolls like every ten seconds\n& you want to assure that the visible content changes every ten seconds\n\n```javascript\ntest.open('http://myticker.org')\n  .assert.visible('.ticker-element:first-child', 'First ticker element is visible')\n  .wait(10000)\n  .assert.visible('.ticker-element:nth-child(2)', 'Snd. ticker element is visible')\n  .wait(10000)\n  .assert.visible('.ticker-element:last-child', 'Third ticker element is visible')\n  .done();\n```\nIf no timeout argument is given, a default timeout of 5 seconds will be used\n\n```javascript\ntest.open('http://myticker.org')\n  .assert.visible('.ticker-element:first-child', 'First ticker element is visible')\n  .wait()\n  .assert.visible('.ticker-element:nth-child(2)', 'Snd. ticker element is visible')\n  .wait()\n  .assert.visible('.ticker-element:last-child', 'Third ticker element is visible')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "wait",
            "params": [
                {
                    "name": "timeout",
                    "description": "in milliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 506,
            "description": "Reloads current page location.\n\nThis is basically the same as hitting F5/refresh in your browser\n\n```javascript\ntest.open('http://google.com')\n  .reload()\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "reload",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 529,
            "description": "Moves a step forward in browser's history.\n\nThis is basically the same as hitting the forward button in your browser\n\n```javascript\ntest.open('http://google.com')\n  .open('https://github.com')\n  .assert.url.is('https://github.com/', 'We are at GitHub')\n  .back()\n  .assert.url.is('http://google.com', 'We are at Google!')\n  .forward()\n  .assert.url.is('https://github.com/', 'Back at GitHub! Timetravel FTW')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "forward",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 557,
            "description": "Moves back a step in browser's history.\n\nThis is basically the same as hitting the back button in your browser\n\n```javascript\ntest.open('http://google.com')\n  .open('https://github.com')\n  .assert.url.is('https://github.com/', 'We are at GitHub')\n  .back()\n  .assert.url.is('http://google.com', 'We are at Google!')\n  .forward()\n  .assert.url.is('https://github.com/', 'Back at GitHub! Timetravel FTW');\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "back",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 585,
            "description": "Performs a click on the element matching the provided selector expression.\n\nIf we take Daleks homepage (the one you're probably visiting right now),\nthe HTML looks something like this (it does not really, but hey, lets assume this for a second)\n\n```html\n<nav>\n  <ul>\n    <li><a id=\"homeapge\" href=\"/index.html\">DalekJS</a></li>\n    <li><a id=\"docs\" href=\"/docs.html\">Documentation</a></li>\n    <li><a id=\"faq\" href=\"/faq.html\">F.A.Q</a></li>\n  </ul>\n</nav>\n```\n\n```javascript\ntest.open('http://dalekjs.com')\n    .click('#faq')\n    .assert.title().is('DalekJS - Frequently asked questions', 'What the F.A.Q.')\n    .done();\n```\n\nBy default, this performs a left click.\nIn the future it might become the ability to also execute a \"right button\" click.",
            "api": "",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the element to be clicked",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 629,
            "description": "Submits a form.\n\n```html\n<form id=\"skaaro\" action=\"skaaro.php\" method=\"GET\">\n  <input type=\"hidden\" name=\"intheshadows\" value=\"itis\"/>\n  <input type=\"text\" name=\"truth\" id=\"truth\" value=\"\"/>\n</form>\n```\n\n```javascript\ntest.open('http://home.dalek.com')\n    .type('#truth', 'out there is')\n    .submit('#skaaro')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "submit",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the form to be submitted",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 664,
            "description": "Performs an HTTP request for opening a given location.\nYou can forge GET, POST, PUT, DELETE and HEAD requests.\n\nBasically the same as typing a location into your browsers URL bar and\nhitting return.\n\n```javascript\ntest.open('http://dalekjs.com')\n    .assert.url().is('http://dalekjs.com', 'DalekJS I'm in you')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "location",
                    "description": "URL of the page to open",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 690,
            "description": "Types a text into an input field or text area.\nAnd yes, it really types, character for character, like you would\ndo when using your keyboard.\n\n\n```html\n<form id=\"skaaro\" action=\"skaaro.php\" method=\"GET\">\n  <input type=\"hidden\" name=\"intheshadows\" value=\"itis\"/>\n  <input type=\"text\" name=\"truth\" id=\"truth\" value=\"\"/>\n</form>\n```\n\n```javascript\ntest.open('http://home.dalek.com')\n    .type('#truth', 'out there is')\n    .assert.val('#truth', 'out there is', 'Text has been set')\n    .done();\n```\n\nYou can also send special keys using unicode.\n\n * ```javascript\ntest.open('http://home.dalek.com')\n    .type('#truth', 'out \\uE008there\\uE008 is')\n    .assert.val('#truth', 'out THERE is', 'Text has been set')\n    .done();\n```\nYou can go [here](https://code.google.com/p/selenium/wiki/JsonWireProtocol#/session/:sessionId/element/:id/value) to read up on special keys and unicodes for them (note that a code of U+EXXX is actually written in code as \\uEXXX).",
            "api": "",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the form field to be filled",
                    "type": "String"
                },
                {
                    "name": "keystrokes",
                    "description": "Text to be applied to the element",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 740,
            "description": "This acts just like .type() with a key difference.  This action can be used on non-input elements (useful for test site wide keyboard shortcuts and the like).  So assumeing we have a keyboard shortcut that display an alert box, we could test that with something like this:\n\n```javascript\ntest.open('http://home.dalek.com')\n    .sendKeys('body', '\\uE00C')\n    .assert.dialogText('press the escape key give this alert text')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "sendKeys",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector of the form field to be filled",
                    "type": "String"
                },
                {
                    "name": "keystrokes",
                    "description": "Text to be applied to the element",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 770,
            "description": "Types a text into the text inout field of a prompt dialog.\nLike you would do when using your keyboard.\n\n```html\n<div>\n  <a id=\"aquestion\" onclick=\"this.innerText = window.prompt('Your favourite companion:')\">????</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n    .click('#aquestion')\n    .answer('Rose')\n    .assert.text('#aquestion').is('Rose', 'Awesome she was!')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "answer",
            "params": [
                {
                    "name": "keystrokes",
                    "description": "Text to be applied to the element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 801,
            "description": "Accepts an alert/prompt/confirm dialog. This is basically the same actions as when\nyou are clicking okay or hitting return in one of that dialogs.\n\n```html\n<div>\n  <a id=\"attentione\" onclick=\"window.alert('Alonsy!')\">ALERT!ALERT!</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n    // alert appears\n    .click('#attentione')\n    // alert is gone\n    .accept()\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "accept",
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 831,
            "description": "Dismisses an prompt/confirm dialog. This is basically the same actions as when\nyou are clicking cancel in one of that dialogs.\n\n```html\n<div>\n  <a id=\"nonono\" onclick=\"(this.innerText = window.confirm('No classic doctors in the 50th?') ? 'Buh!' : ':(') \">What!</a>\n</div>\n```\n\n```javascript\n test.open('http://adomain.com')\n    // prompt appears\n    .click('#nonono')\n    // prompt is gone\n    .dismiss()\n    .assert.text('#nonono').is(':(', 'So sad')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "dismiss",
            "return": {
                "description": "chainable"
            },
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 862,
            "description": "Resizes the browser window to a set of given dimensions (in px).\nThe default configuration of dalek opening pages is a width of 1280px\nand a height of 1024px. You can specify your own default in the configuration.\n\n```html\n<div>\n  <span id=\"magicspan\">The span in the fireplace</span>\n</div>\n```\n\n```css\n#magicspan {\n  display: inline;\n}",
            "media": "all and (max-width: 500px) and (min-width: 300px) {\n  #magicspan {\n    display: none;\n  }\n}\n```\n\n```javascript\n test.open('http://adomain.com')\n    .assert.visible('#magicspan', 'Big screen, visible span')\n    .resize({width: 400, height: 500})\n    .assert.notVisible('#magicspan', 'Small screen, no visible span magic!')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "dimensions",
                    "description": "Width and height as properties to apply",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 906,
            "description": "Maximizes the browser window.\n\n```html\n<div>\n  <span id=\"magicspan\">The span in the fireplace</span>\n</div>\n```\n\n```css\n#magicspan {\n  display: inline;\n}",
            "media": "all and (max-width: 500px) and (min-width: 300px) {\n  #magicspan {\n    display: none;\n  }\n}\n```\n\n```javascript\n test.open('http://adomain.com')\n    .resize({width: 400, height: 500})\n    .assert.notVisible('#magicspan', 'Small screen, no visible span magic!')\n    .maximize()\n    .assert.visible('#magicspan', 'Big screen, visible span')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "maximize",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 948,
            "description": "Sets a cookie.\nMore configuration options will be implemented in the future,\nby now, you can only set a cookie with a specific name and contents.\nThis will be a domain wide set cookie.\n\n```javascript\n test.open('http://adomain.com')\n     .setCookie('my_cookie_name', 'my=content')\n    .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "setCookie",
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 972,
            "description": "Waits until an element matching the provided\nselector expression exists in remote DOM to process any next step.\n\nLets assume we have a ticker that loads its contents via AJAX,\nand appends new elements, when the call has been successfully answered:\n\n```javascript\ntest.open('http://myticker.org')\n  .assert.text('.ticker-element:first-child', 'First!', 'First ticker element is visible')\n  // now we load the next ticker element, defsult timeout is 5 seconds\n  .waitForElement('.ticker-element:nth-child(2)')\n  .assert.text('.ticker-element:nth-child(2)', 'Me snd. one', 'Snd. ticker element is visible')\n  // Lets assume that this AJAX call can take longer, so we raise the default timeout to 10 seconds\n  .waitForElement('.ticker-element:last-child', 10000)\n  .assert.text('.ticker-element:last-child', 'Me, third one!', 'Third ticker element is visible')\n  .done();\n```",
            "api": "",
            "itemtype": "method",
            "name": "waitForElement",
            "params": [
                {
                    "name": "selector",
                    "description": "Selector that matches the element to wait for",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "Timeout in milliseconds",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 1011,
            "description": "Generates a callback that will be fired when the action has been completed.\nThe callback itself will then validate the answer and will also emit an event\nthat the action has been successfully executed.",
            "itemtype": "method",
            "name": "_generateCallbackAssertion",
            "params": [
                {
                    "name": "key",
                    "description": "Unique key of the action",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Type of the action (normalle the actions name)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated callback function",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 1041,
            "description": "Fills the fields of a form with given values.\n\n```html\n<input type=\"hidden\" value=\"not really a value\" id=\"ijustwannahaveavalue\"/>\n```\n\n```javascript\ntest.open('http://dalekjs.com')\n    .setValue('#ijustwannahaveavalue', 'a value')\n    .title().is('DalekJS - Frequently asked questions', 'What the F.A.Q.');\n```",
            "api": "",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "selector",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Actions"
            },
            "class": "Actions"
        },
        {
            "file": "index.js",
            "line": 1074,
            "description": "Adds a method to the queue of actions/assertions to execute",
            "itemtype": "method",
            "name": "_addToActionQueue",
            "params": [
                {
                    "name": "opts",
                    "description": "Options of the action to invoke",
                    "type": "Object"
                },
                {
                    "name": "driverMethod",
                    "description": "Name of the method to call on the driver",
                    "type": "String"
                },
                {
                    "name": "A",
                    "description": "callback function that will be executed when the action has been executed",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "Actions"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: part",
            "line": " index.js:33"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:33"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:47"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:93"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:177"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:220"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:252"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:290"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:417"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:466"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:506"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:529"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:557"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:585"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:629"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:664"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:690"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:740"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:770"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:801"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:831"
        },
        {
            "message": "unknown tag: media",
            "line": " index.js:862"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:862"
        },
        {
            "message": "unknown tag: media",
            "line": " index.js:906"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:906"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:948"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:972"
        },
        {
            "message": "unknown tag: api",
            "line": " index.js:1041"
        },
        {
            "message": "Missing item type\nTag-closer extension for CodeMirror.\n\nThis extension adds an \"autoCloseTags\" option that can be set to\neither true to get the default behavior, or an object to further\nconfigure its behavior.\n\nThese are supported options:\n\n`whenClosing` (default true)\n  Whether to autoclose when the '/' of a closing tag is typed.\n`whenOpening` (default true)\n  Whether to autoclose the tag when the final '>' of an opening\n  tag is typed.\n`dontCloseTags` (default is empty tags for HTML, none for XML)\n  An array of tag names that should not be autoclosed.\n`indentTags` (default is block tags for HTML, none for XML)\n  An array of tag names that should, when opened, cause a\n  blank line to be added inside the tag, and the blank line and\n  closing line to be indented.\n\nSee demos/closetag.html for a usage example.",
            "line": " report/complexity/assets/scripts/vendor/codemirror/util/closetag.js:1"
        }
    ]
}